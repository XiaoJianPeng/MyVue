
bower-> （前端）包管理器
	npm install bower -g
		验证: bower --version

bower install <包名>
bower uninstall <包名>
bower info <包名>	查看包版本信息

<script src="bower_components/vue/dist/vue.js"></script>
-------------------------------------
vue-> 过渡(动画)
<link> 标签最常见的用途是链接样式表。
<link rel="stylesheet" href="..\bower_components/animate.css/animate.css">
	本质走的css3: transtion ,animation

	<div id="div1" v-show="bSign" transition="fade"></div>

	动画:
		.fade-transition{
			
		}
		进入：
		.fade-enter{
			opacity: 0;
		}
		离开：
		.fade-leave{
			opacity: 0;
			transform: translateX(200px);
		}
	----------------------------------------
    vue 组件   组件: 一个大对象
    定义一个组件:
    1. 全局组件
    var Aaa=Vue.extend({
        template:'<h3>我是标题3</h3>'
    });

    Vue.component('aaa',Aaa);

        *组件里面放数据:
            data必须是函数的形式，函数必须返回一个对象(json)
    2. 局部组件
        放到某个组件内部
    var vm=new Vue({
        el:'#box',
        data:{
            bSign:true
        },
        components:{ //局部组件
            aaa:Aaa
        }
    });
    --------------------------------------
    另一种编写方式:
        Vue.component('my-aaa',{
            template:'<strong>好</strong>'
        });

        var vm=new Vue({
            el:'#box',
            components:{  ///components中可以加载多个组件
                'my-aaa':{
                    template:'<h2>标题2</h2>'
                }
            }
        });
    -----------------------------------
    配合模板:
	1. template:'<h2 @click="change">标题2->{{msg}}</h2>'

	2. 单独放到某个地方
		a). <script type="x-template" id="aaa">
			<h2 @click="change">标题2->{{msg}}</h2>
		</script>
		b). <template id="aaa">
			<h1>标题1</h1>
			<ul>
				<li v-for="val in arr">
					{{val}}
				</li>
			</ul>
		</template>
-----------------------------------
动态组件:
	<component :is="组件名称"></component>
--------------------------------------------
vue-devtools	->  调试工具
	https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd
--------------------------------------------
vue默认情况下，子组件也没法访问父组件数据

--------------------------------------------
组件数据传递:	√
1. 子组件就想获取父组件data
	在调用子组件：
		<bbb :m="数据"></bbb>

	子组件之内:
		props:['m','myMsg']

		props:{
			'm':String,
			'myMsg':Number
		}
2. 父级获取子级数据
	*子组件把自己的数据，发送到父级

	vm.$emit(事件名,数据);

	v-on:	@
--------------------------------------------
