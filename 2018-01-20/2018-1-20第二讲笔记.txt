15 个必备的 VSCode 插件（前端类）https://zhuanlan.zhihu.com/p/27905838

vue->  1.0
	vue-resource	ajax	php
	服务器环境(node)

	this.$http.get()/post()/jsonp()

	this.$http({
		url:地址
		data:给后台提交数据,
		method:'get'/post/jsonp
		jsonp:'cb' //cbName
	});
----------------------------------
vue生命周期:
	钩子函数:
vue2.0的 https://segmentfault.com/a/1190000008010666
	created	->   实例已经创建	√
	beforeCompile	->   编译之前
	compiled	->   编译之后
	ready		->   插入到文档中	√

	beforeDestroy	->   销毁之前
	destroyed	->   销毁之后
	// 调用销毁事件不能用@click=""
	//销毁事件不能写在vue里 
----------------------------------
用户会看到花括号标记:
	
	v-cloak		防止闪烁, 用在比较大段落
    {{msg}} 		等价于   v-text
    {{{msg}}}		等价于   v-html

计算属性的使用:
	computed:{
		b:function(){	//默认调用get
			return 值
		}
	}
	--------------------------
	computed:{
		b:{
			get:
			set://set中改变计算属性本身会引起死循环 
		}
	}

	* computed里面可以放置一些业务逻辑代码，一定记得return


vue实例简单方法:
	vm.$el	->  就是元素
	vm.$data  ->  就是data
	vm.$mount ->  手动挂在vue程序
	
	vm.$options	->   获取自定义属性
	vm.$destroy	->   销毁对象

	vm.$log();	->  查看现在数据的状态

	循环：
	v-for="value in data"

	会有重复数据？
	track-by='索引'	提高循环性能

	track-by='$index/uid'
——————————————————————————————————————————————————————————————————
	过滤器:
	vue提供过滤器:
		capitalize	uppercase	currency....

		debounce	配合事件，延迟执行　@keyup="show | debounce 2000"
	数据配合使用过滤器:
		limitBy	限制几个
		limitBy 参数(取几个)
		limitBy 取几个  从哪开始

		filterBy	过滤数据 
		filterBy ‘谁’  
		1 过滤a a是一个参数 <li v-for="val in arr | filterBy a">  
		2 过滤字符串a  <li v-for="val in arr | filterBy 'a'"> 

		orderBy	排序
		orderBy 谁 1/-1
			1  -> 正序
			-1  -> 倒序

	自定义过滤器:  model ->过滤 -> view
		Vue.filter(name,function(input){
			
		});

	时间转化器
	Vue.filter('date',function(d) {
            var oDate=new Date(d);
            return oDate.getFullYear()+'-'+oDate.getMonth()+1+'-'+oDate.getDate()+' '+oDate.getHours()
            +':'+oDate.getMinutes() +':'+oDate.getSeconds();
        });
        
	过滤html标记
		Vue.filter('filterHtml',function(input){
            return input.replace(/<[^<]+>/g,'');
        });

	双向过滤器:*
	Vue.filter('filterHtml',{
	            read:function(input){ //model-view
	                return input.replace(/<[^<+]>/g,'');
	            },
	            write:function(val){ //view -> model
	                return val;
	            }
	});
	数据 -> 视图
	model -> view
	view -> model
---------------------------------——————————————————————————————————————————————————————————————————
-text
v-for
v-html
	指令: 扩展html语法

自定义指令:
	属性:

	Vue.directive(指令名称,function(参数){
		this.el	-> 原生DOM元素
	});
	
	//传入多个参数时要使用json串
	<div v-drag v-ds="{color : 'blue',width : '200px'}" >2</div>
	Vue.directive('ds',function(value){
		this.el.style.background=value.color;
		this.el.style.width=value.width;
		this.el.style.height='100px';
		this.el.style.position='absolute';            
	});
	<div v-red="参数"></div>

	指令名称: 	v-red  ->  red

	* 注意: 必须以 v-开头

	拖拽:
	-------------------------------————————
	@keydown.up
	@keydown.enter

	@keydown.a/b/c....

	自定义键盘信息:
	Vue.directive('on').keyCodes.ctrl=17;
	Vue.directive('on').keyCodes.myenter=13;